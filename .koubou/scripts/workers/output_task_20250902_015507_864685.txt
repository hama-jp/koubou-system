# generated_content.txt
# ------------------------------------------------------------------
# Library Management System – Full Flask Application
# ------------------------------------------------------------------
# This file contains a complete, self‑contained Flask web application
# that implements a simple library system.  It includes:
#
#   * User registration & login (with password hashing)
#   * Book catalog (list, detail, search)
#   * Checkout / return functionality
#   * Admin dashboard (add/edit/delete books, view users & checkouts)
#   * Basic HTML/CSS/JS templates rendered from strings
#   * SQLite persistence (created automatically on first run)
#
# ------------------------------------------------------------------
# How to run:
#   1. Install dependencies:
#        pip install flask flask-login
#   2. Save this file as `app.py` (or any name you prefer)
#   3. Run the application:
#        python app.py
#   4. Open your browser at http://127.0.0.1:5000/
#
# ------------------------------------------------------------------
# Author: ChatGPT
# Date: 2025-09-02
# ------------------------------------------------------------------

from flask import Flask, request, redirect, url_for, render_template_string, flash, session
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os
from datetime import datetime

# ------------------------------------------------------------------
# Configuration
# ------------------------------------------------------------------
app = Flask(__name__)
app.config['SECRET_KEY'] = 'replace-with-a-strong-secret-key'
app.config['DATABASE'] = os.path.join(app.root_path, 'library.db')

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# ------------------------------------------------------------------
# Database helpers
# ------------------------------------------------------------------
def get_db():
    """Return a database connection, creating the database if needed."""
    db = getattr(app, '_database', None)
    if db is None:
        db = app._database = sqlite3.connect(app.config['DATABASE'])
        db.row_factory = sqlite3.Row
    return db

def init_db():
    """Create tables if they do not exist."""
    db = get_db()
    cursor = db.cursor()
    # Users table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            is_admin INTEGER NOT NULL DEFAULT 0
        )
    ''')
    # Books table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS books (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            author TEXT NOT NULL,
            isbn TEXT UNIQUE NOT NULL,
            copies_total INTEGER NOT NULL DEFAULT 1,
            copies_available INTEGER NOT NULL DEFAULT 1
        )
    ''')
    # Checkouts table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS checkouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            book_id INTEGER NOT NULL,
            checkout_date TEXT NOT NULL,
            return_date TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id),
            FOREIGN KEY(book_id) REFERENCES books(id)
        )
    ''')
    db.commit()

    # Create a default admin user if none exist
    cursor.execute('SELECT COUNT(*) FROM users')
    if cursor.fetchone()[0] == 0:
        admin_pw = generate_password_hash('admin123')
        cursor.execute('INSERT INTO users (username, password_hash, is_admin) VALUES (?, ?, ?)',
                       ('admin', admin_pw, 1))
        db.commit()
        print('Created default admin user: username="admin", password="admin123"')

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(app, '_database', None)
    if db is not None:
        db.close()

# ------------------------------------------------------------------
# User model for Flask-Login
# ------------------------------------------------------------------
class User(UserMixin):
    def __init__(self, id_, username, password_hash, is_admin):
        self.id = id_
        self.username = username
        self.password_hash = password_hash
        self.is_admin = bool(is_admin)

    @staticmethod
    def get(user_id):
        db = get_db()
        cursor = db.cursor()
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            return User(row['id'], row['username'], row['password_hash'], row['is_admin'])
        return None

    @staticmethod
    def get_by_username(username):
        db = get_db()
        cursor = db.cursor()
        cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            return User(row['id'], row['username'], row['password_hash'], row['is_admin'])
        return None

@login_manager.user_loader
def load_user(user_id):
    return User.get(user_id)

# ------------------------------------------------------------------
# Templates (as strings)
# ------------------------------------------------------------------
BASE_TEMPLATE = '''
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Library System</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 0; padding: 0; background:#f4f4f4; }}
        header {{ background:#333; color:#fff; padding:10px; }}
        nav a {{ color:#fff; margin-right:15px; text-decoration:none; }}
        .container {{ padding:20px; }}
        .book {{ background:#fff; padding:15px; margin-bottom:10px; border-radius:5px; }}
        .btn {{ padding:5px 10px; background:#333; color:#fff; border:none; border-radius:3px; cursor:pointer; }}
        .btn:hover {{ background:#555; }}
        .alert {{ padding:10px; background:#e74c3c; color:#fff; margin-bottom:10px; border-radius:3px; }}
        .success {{ background:#2ecc71; }}
        footer {{ text-align:center; padding:10px; background:#333; color:#fff; position:fixed; bottom:0; width:100%; }}
        .search-box {{ margin-bottom:20px; }}
        .search-box input[type="text"] {{ width:80%; padding:5px; }}
        .search-box button {{ padding:5px 10px; }}
    </style>
    <script>
        function searchBooks() {{
            var query = document.getElementById('searchInput').value;
            window.location.href = '/search?q=' + encodeURIComponent(query);
        }}
    </script>
</head>
<body>
<header>
    <nav>
        <a href="{{ url_for('index') }}">Home</a>
        {% if current_user.is_authenticated %}
            <a href="{{ url_for('logout') }}">Logout ({{ current_user.username }})</a>
            {% if current_user.is_admin %}
                <a href="{{ url_for('admin_dashboard') }}">Admin</a>
            {% endif %}
        {% else %}
            <a href="{{ url_for('login') }}">Login</a>
            <a href="{{ url_for('register') }}">Register</a>
        {% endif %}
    </nav>
</header>
<div class="container">
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="alert {{ 'success' if category=='success' else '' }}">{{ message }}</div>
            {% endfor %}
        {% endif %}
    {% endwith %}
    {% block content %}{% endblock %}
</div>
<footer>
    &copy; 2025 Library System
</footer>
</body>
</html>
'''

INDEX_TEMPLATE = '''
{% extends "base.html" %}
{% block content %}
<h1>Book Catalog</h1>
<div class="search-box">
    <input type="text" id="searchInput" placeholder="Search by title, author, ISBN" />
    <button onclick="searchBooks()">Search</button>
</div>
{% for book in books %}
<div class="book">
    <h3>{{ book['title'] }} <small>by {{ book['author'] }}</small></h3>
    <p>ISBN: {{ book['isbn'] }}</p>
    <p>Available: {{ book['copies_available'] }} / {{ book['copies_total'] }}</p>
    <a class="btn" href="{{ url_for('book_detail', book_id=book['id']) }}">Details</a>
</div>
{% else %}
<p>No books found.</p>
{% endfor %}
{% endblock %}
'''

REGISTER_TEMPLATE = '''
{% extends "base.html" %}
{% block content %}
<h2>Register</h2>
<form method="post">
    <label>Username:<br><input type="text" name="username" required></label><br><br>
    <label>Password:<br><input type="password" name="password" required></label><br><br>
    <button class="btn" type="submit">Register</button>
</form>
{% endblock %}
'''

LOGIN_TEMPLATE = '''
{% extends "base.html" %}
{% block content %}
<h2>Login</h2>
<form method="post">
    <label>Username:<br><input type="text" name="username" required></label><br><br>
    <label>Password:<br><input type="password" name="password" required></label><br><br>
    <button class="btn" type="submit">Login</button>
</form>
{% endblock %}
'''

BOOK_DETAIL_TEMPLATE = '''
{% extends "base.html" %}
{% block content %}
<h2>{{ book['title'] }}</h2>
<p><strong>Author:</strong> {{ book['author'] }}</p>
<p><strong>ISBN:</strong> {{ book['isbn'] }}</p>
<p><strong>Available:</strong> {{ book['copies_available'] }} / {{ book['copies_total'] }}</p>
{% if current_user.is_authenticated %}
    {% if book['copies_available'] > 0 %}
        <form method="post" action="{{ url_for('checkout', book_id=book['id']) }}">
            <button class="btn" type="submit">Checkout</button>
        </form>
    {% else %}
        <p>Currently not available for checkout.</p>
    {% endif %}
{% else %}
    <p><a href="{{ url_for('login') }}">Login</a> to checkout.</p>
{% endif %}
{% endblock %}
'''

SEARCH_TEMPLATE = '''
{% extends "base.html" %}
{% block content %}
<h2>Search Results for "{{ query }}"</h2>
<div class="search-box">
    <input type="text" id="searchInput" placeholder="Search by title, author, ISBN" value="{{ query }}"/>
    <button onclick="searchBooks()">Search</button>
</div>
{% for book in books %}
<div class="book">
    <h3>{{ book['title'] }} <small>by {{ book['author'] }}</small></h3>
    <p>ISBN: {{ book['isbn'] }}</p>
    <p>Available: {{ book['copies_available'] }} / {{ book['copies_total'] }}</p>
    <a class="btn" href="{{ url_for('book_detail', book_id=book['id']) }}">Details</a>
</div>
{% else %}
<p>No books matched your query.</p>
{% endfor %}
{% endblock %}
'''

ADMIN_DASHBOARD_TEMPLATE = '''
{% extends "base.html" %}
{% block content %}
<h2>Admin Dashboard</h2>
<h3>Books</h3>
<a class="btn" href="{{ url_for('admin_add_book') }}">Add New Book</a>
<table border="1" cellpadding="5" cellspacing="0" style="margin-top:10px;">
    <tr><th>ID</th><th>Title</th><th>Author</th><th>ISBN</th><th>Copies</th><th>Actions</th></tr>
    {% for book in books %}
    <tr>
        <td>{{ book['id'] }}</td>
        <td>{{ book['title'] }}</td>
        <td>{{ book['author'] }}</td>
        <td>{{ book['isbn'] }}</td>
        <td>{{ book['copies_total'] }}</td>
        <td>
            <a class="btn" href="{{ url_for('admin_edit_book', book_id=book['id']) }}">Edit</a>
            <form style="display:inline;" method="post" action="{{ url_for('admin_delete_book', book_id=book['id']) }}">
                <button class="btn" type="submit" onclick="return confirm('Delete this book?');">Delete</button>
            </form>
        </td>
    </tr>
    {% endfor %}
</table>

<h3>Users</h3>
<table border="1" cellpadding="5" cellspacing="0" style="margin-top:10px;">
    <tr><th>ID</th><th>Username</th><th>Admin</th><th>Actions</th></tr>
    {% for user in users %}
    <tr>
        <td>{{ user['id'] }}</td>
        <td>{{ user['username'] }}</td>
        <td>{{ 'Yes' if user['is_admin'] else 'No' }}</td>
        <td>
            {% if user['id'] != current_user.id %}
            <form style="display:inline;" method="post" action="{{ url_for('admin_delete_user', user_id=user['id']) }}">
                <button class="btn" type="submit" onclick="return confirm('Delete this user?');">Delete</button>
            </form>
            {% endif %}
        </td>
    </tr>
    {% endfor %}
</table>

<h3>Checkouts</h3>
<table border="1" cellpadding="5" cellspacing="0" style="margin-top:10px;">
    <tr><th>ID</th><th>User</th><th>Book</th><th>Checkout Date</th><th>Return Date</th></tr>
    {% for co in checkouts %}
    <tr>
        <td>{{ co['id'] }}</td>
        <td>{{ co['username'] }}</td>
        <td>{{ co['title'] }}</td>
        <td>{{ co['checkout_date'] }}</td>
        <td>{{ co['return_date'] or 'Not returned' }}</td>
    </tr>
    {% endfor %}
</table>
{% endblock %}
'''

ADMIN_ADD_BOOK_TEMPLATE = '''
{% extends "base.html" %}
{% block content %}
<h2>Add New Book</h2>
<form method="post">
    <label>Title:<br><input type="text" name="title" required></label><br><br>
    <label>Author:<br><input type="text" name="author" required></label><br><br>
    <label>ISBN:<br><input type="text" name="isbn" required></label><br><br>
    <label>Total Copies:<br><input type="number" name="copies_total" min="1" value="1" required></label><br><br>
    <button class="btn" type="submit">Add Book</button>
</form>
{% endblock %}
'''

ADMIN_EDIT_BOOK_TEMPLATE = '''
{% extends "base.html" %}